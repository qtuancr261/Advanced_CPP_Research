------------------------------------------------------------------------------------------------------------------------------------
C++11 Concurrency brief tutorial
------------------------------------------------------------------------------------------------------------------------------------
//// (* ref: C++ Concurrency in action ebooks by Anthony Williams *) ///////
------------------------------------------------------------------------------------------------------------------------------------
The C++98 standard doesn't acknowledge the existence of threads (mostly used C APIs for multithreading - such as POSIX C or Microsoft Windows API (platform-specific extensions) | boost library,....)
With the release of the new C++ standard, there is not only a brandnew thread-aware memory model, but include classes for managing threads, protecting shared data,
, synchronizing operations betweeen threads and low-level atomic operations (based on the prior experience through the use of the C++ class libs memtoned previously
, the Boost Thread library has been used as the primary model on which the new library is based)
You can check the compiler that support C++11 standard at https://en.cppreference.com/w/cpp/compiler_support
------------------------------------------------------------------------------------------------------------------------------------
Headers:
 - <thread> std::thread
 - <mutex> std::mutex | std::lock_guard | std::unique_lock
------------------------------------------------------------------------------------------------------------------------------------
ConcurrentWorld example: basic actions for creating and managing std::thread
------------------------------------------------------------------------------------------------------------------------------------
ProtectingDataMutex: using mutex (mutual excusion) in C++11 to protect shared data between threads
 -#Race Conditions: occur where completing an operation requires modification of two or more distinct pieces of data, such as the two link pointer in double-linked list node, another thread could potentially access the data structure
when only one of them has been completed.
 - Often very hard to find and hard to duplicate because it is generally timing sensitive 
 - Using:
   -> manually: creating an instance of std::mutex and call its member function lock() - unlock() (shouldn't use this way)
   -> practically: use std::lock_guard for a std::mutex , it will lock the associate mutex by the std::lock_guard contructor and unlock by the destructor
 -#Deadlock: this problem is almost the opposite of a race condition, rather than two or more threads racing to be first, each one is waiting for the other, so neither makes any progress
 - Using: avoid wait cycle
   -> avoid nested lock, if must you should lock in order or use hierarchy lock (C++ stand doesn't support it, see the hierarchy_mutex implement) or use std::lock to lock two or more mutexs at one without risk of deadlock from lock in order
   -> avoid waiting for a thread while already hold a lock, because that thread may need to acquire the lock in order to proceed
 - std::unique_lock is a bit more flexibility than std::lock_guard
